# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

name: Deploy to Amazon EC2

jobs:
  deploy:
    name: Deploy
    runs-on: self-hosted
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup python environment # setting python environment to 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # run: source ~/venv/bin/activate
    - name: Install Python Virtual ENV
      run: pip3 install virtualenv
    - name:  Setup Virtual env
      uses: actions/cache@v2
      id: cache-venv
      with:
        path: venv
        key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-
    
    - name: Activate and Install Depencies into Virtual env
      run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
      if: steps.cache-venv.outputs.cache-hit != 'true'   
    - name: Activate venv    
      run: . venv/bin/activate && python manage.py migrate
    - name: Restart daemon
      run: sudo systemctl daemon-reload
    - name: Restart gunicorn
      run: sudo systemctl restart gunicorn
    - name: Restart nginx 
      run: sudo systemctl restart nginx
 


 
